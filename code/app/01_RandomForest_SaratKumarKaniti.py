# -*- coding: utf-8 -*-
"""RandomForestClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/137ulFbLvFd0UuOkSLNB1mV-9WOLE5eP1
"""

from sklearn.preprocessing import StandardScaler
for col in X.columns:     
  scaler = StandardScaler()     
  X[col] = scaler.fit_transform(X[col].values.reshape(-1, 1))

round(Y.value_counts(normalize=True) * 100, 2).astype('str') + ' %'

from imblearn.over_sampling import RandomOverSampler 
ros = RandomOverSampler(random_state = 42)
ros.fit(X, Y)
X_resampled, Y_resampled = ros.fit_resample(X, Y)
round(Y_resampled.value_counts(normalize=True) * 100, 2).astype('str')

"""#Splitting the dataset"""

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 100)

print("X_train shape:", x_train.shape) 
print("X_test shape:", x_test.shape) 
print("Y_train shape:", y_train.shape) 
print("Y_test shape:", y_test.shape)

"""##Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
ran_for = RandomForestClassifier(random_state = 42)
ran_for.fit(x_train, y_train)
Y_pred_ran_for = ran_for.predict(x_test)

from sklearn.metrics import accuracy_score
print('Random Forest Classifier:')
print('Accuracy score:',round(accuracy_score(y_test, Y_pred_ran_for) * 100, 2))

from sklearn.model_selection import RandomizedSearchCV
n_estimators = [int(x) for x in np.linspace(start = 40, stop = 150, num = 15)]
max_depth = [int(x) for x in np.linspace(40, 150, num = 15)]
param_dist = {
    'n_estimators' : n_estimators,
    'max_depth' : max_depth,
}
rf_tuned = RandomForestClassifier(random_state = 42)
rf_cv = RandomizedSearchCV(estimator = rf_tuned, param_distributions = param_dist, cv = 5, random_state = 42)
rf_cv.fit(x_train, y_train)
rf_cv.best_score_

rf_cv.best_params_

from sklearn.metrics import classification_report
print(classification_report(y_test, Y_pred_ran_for))

from sklearn import metrics
import matplotlib.pyplot as plt

#define metrics

fpr, tpr, _ = metrics.roc_curve(y_test, Y_pred_ran_for)
auc = metrics.roc_auc_score(y_test, Y_pred_ran_for)

#create ROC curve
plt.plot(fpr,tpr,label="AUC="+str(auc))
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()